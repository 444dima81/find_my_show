# IMPORT
import os
# from dotenv import load_dotenv
from qdrant_client import QdrantClient
from qdrant_client.models import PointStruct
from langchain_qdrant import QdrantVectorStore
from langchain_huggingface import HuggingFaceEmbeddings
from langchain_groq import ChatGroq
from langchain.schema.runnable import RunnablePassthrough
from langchain.schema.output_parser import StrOutputParser
from langchain.prompts import ChatPromptTemplate
import streamlit as st


# KEYKEYKEY
load_dotenv()

QDRANT_URL = os.getenv("QDRANT_URL")
QDRANT_API_KEY = os.getenv("QDRANT_API_KEY")
HF_TOKEN = os.getenv("HF_TOKEN")
GROQ_API_KEY = os.getenv("GROQ_API_KEY")


# CONNECT TO Qdrant Cloud
cloud_client = QdrantClient(
    url=QDRANT_URL,
    api_key=QDRANT_API_KEY
)


# MODEL EMBEDDING Hugging Face
embeddings = HuggingFaceEmbeddings(
    model_name="sentence-transformers/paraphrase-multilingual-mpnet-base-v2",
    model_kwargs={"device": "cpu"},   # –∏–ª–∏ "cuda", –µ—Å–ª–∏ GPU –µ—Å—Ç—å
    encode_kwargs={"normalize_embeddings": True}
)


# QDRANT DATA CONNECT 
qdrant_client = QdrantVectorStore(
    client=cloud_client,
    collection_name="demo_collection",
    embedding=embeddings
)


# CONNECT TO LLM (Groq)
llm = ChatGroq(
    api_key=GROQ_API_KEY,
    model="llama-3.3-70b-versatile"
)

# –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –∫–æ–ª–ª–µ–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞
print("üìÅ –ö–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ –æ–±–ª–∞–∫–µ:")
print(cloud_client.get_collections())

# ==============================
# üß† 6. –ü—Ä–æ–º–ø—Ç –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ —Å–µ—Ä–∏–∞–ª–æ–≤
# ==============================
rag_prompt = ChatPromptTemplate.from_messages([
    ("system", """üé¨ –¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–∏–Ω–æ–∫—Ä–∏—Ç–∏–∫ –∏ —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–µ—Ä–∏–∞–ª–∞–º.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–µ—Ä–∏–∞–ª—ã –∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥—è—Ç –ø–æ–¥ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
- üí° –ö—Ä–∞—Ç–∫–æ –æ–±—ä—è—Å–Ω–∏, –ø–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —ç—Ç–∏ —Å–µ—Ä–∏–∞–ª—ã –ø–æ–¥—Ö–æ–¥—è—Ç.
- üéØ –£–∫–∞–∂–∏ –∂–∞–Ω—Ä, —Å—Ç–∏–ª—å –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–∏–∞–ª–∞.
- üòÑ –î–æ–±–∞–≤—å –Ω–µ–º–Ω–æ–≥–æ –∏—Ä–æ–Ω–∏–∏ –∏–ª–∏ –º–µ–º–æ–≤ –æ —Å–µ—Ä–∏–∞–ª–∞—Ö, –µ—Å–ª–∏ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ.
- üß† –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –≤—ã–≤–æ–¥: –∫–∞–∂–¥—ã–π —Å–µ—Ä–∏–∞–ª ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–º –±–ª–æ–∫–æ–º.
- üìç –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∂–∏–≤—ã–º, –Ω–æ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–º —Ç–æ–Ω–æ–º.
"""),
    ("human", """üì∫ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–µ—Ä–∏–∞–ª—ã:
{context}

üéØ –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {question}""")
])

# ==============================
# üîç 7. –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–¥–ª—è –ø—Ä–æ–º–ø—Ç–∞)
# ==============================
def format_docs_for_prompt(docs):
    formatted = []
    for d in docs:
        meta = d.metadata
        title = meta.get("title", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        url = meta.get("page_url", "N/A")
        desc = d.page_content[:300].replace("\n", " ")
        formatted.append(f"üì∫ {title}\nüîó {url}\nüìÑ {desc}...")
    return "\n\n".join(formatted)

# ==============================
# üì∫ 8. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
# ==============================
def show_results(docs):
    for i, d in enumerate(docs, 1):
        meta = d.metadata
        title = meta.get("title", "")
        url = meta.get("page_url", "#")
        img = meta.get("image_url", "")
        desc = d.page_content[:500] + "..."

        st.subheader(f"üé¨ –°–µ—Ä–∏–∞–ª {i}: {title}")
        if img:
            st.image(img, width=300)
        st.markdown(f"[üîó –°–º–æ—Ç—Ä–µ—Ç—å —Å–µ—Ä–∏–∞–ª]({url})")
        st.write(desc)

# ==============================
# üîé 9. –°–æ–∑–¥–∞–Ω–∏–µ RAG —Ü–µ–ø–æ—á–∫–∏
# ==============================
retriever = qdrant_client.as_retriever(
    search_type="similarity",
    search_kwargs={"k": 5}
)

rag_chain = (
    {
        "context": retriever | format_docs_for_prompt,
        "question": RunnablePassthrough()
    }
    | rag_prompt
    | llm
    | StrOutputParser()
)

# ==============================
# üé® 10. Streamlit UI
# ==============================
st.set_page_config(page_title="Find My Show üé•", page_icon="üçø", layout="centered")

st.title("üçø Find My Show ‚Äî —É–º–Ω—ã–π –ø–æ–¥–±–æ—Ä —Å–µ—Ä–∏–∞–ª–æ–≤")
st.write("üîé –û–ø–∏—à–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å ‚Äî –∏ —è –Ω–∞–π–¥—É —Å–µ—Ä–∏–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–æ–π–¥—É—Ç –∏–º–µ–Ω–Ω–æ —Ç–µ–±–µ.")

query = st.text_area("üí≠ –ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –•–æ—á—É –∫–æ–º–µ–¥–∏–π–Ω—ã–π —Å–µ—Ä–∏–∞–ª –ø—Ä–æ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏ –¥—Ä—É–∂–±—É")

if st.button("üîç –ù–∞–π—Ç–∏ —Å–µ—Ä–∏–∞–ª—ã"):
    if query.strip():
        with st.spinner("üîé –ò—â—É –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã..."):
            docs = retriever.invoke(query)  # –ø–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
            show_results(docs)              # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
            answer = rag_chain.invoke(query) # –∞–Ω–∞–ª–∏–∑ –æ—Ç LLM
        st.subheader("üì∫ –ê–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        st.markdown(answer)
    else:
        st.warning("‚úèÔ∏è –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ –∑–∞–ø—Ä–æ—Å.")